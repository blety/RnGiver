<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CardRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CardRepository extends EntityRepository
{
    public function getNb($card)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('count(c.id)');
        $parameters = array();
        if(!is_null($card->getCost())) {
            $qb->where('c.cost = :cost');
            $parameters['cost'] = $card->getCost();
        }
        if(!is_null($card->getAttack())) {
            $qb->andWhere('c.attack= :attack');
            $parameters['attack'] = $card->getAttack();
        }
        if(!is_null($card->getHealth())) {
            $qb->andWhere('c.health= :health');
            $parameters['health'] = $card->getHealth();
        }
        if($card->getTaunt()) {
            $qb->andWhere('c.taunt= :taunt');
            $parameters['taunt'] = $card->getTaunt();
        }
        if($card->getDivineShield()) {
            $qb->andWhere('c.divineShield= :divineShield');
            $parameters['divineShield'] = $card->getDivineShield();
        }
        if($card->getCharge()) {
            $qb->andWhere('c.charge= :charge');
            $parameters['charge'] = $card->getCharge();
        }
        if($card->getBattlecry()) {
            $qb->andWhere('c.battlecry= :battlecry');
            $parameters['battlecry'] = $card->getBattleCry();
        }
        if($card->getDeathrattle()) {
            $qb->andWhere('c.deathrattle= :deathrattle');
            $parameters['deathrattle'] = $card->getDeathrattle();
        }
        if($card->getInspire()) {
            $qb->andWhere('c.inspire= :inspire');
            $parameters['inspire'] = $card->getInspire();
        }
        if($card->getJoust()) {
            $qb->andWhere('c.joust= :joust');
            $parameters['joust'] = $card->getJoust();
        }
        if($card->getStealth()) {
            $qb->andWhere('c.stealth= :stealth');
            $parameters['stealth'] = $card->getStealth();
        }
        if($card->getWindfury()) {
            $qb->andWhere('c.windfury= :windfury');
            $parameters['windfury'] = $card->getWindfury();
        }
        if($card->getCombo()) {
            $qb->andWhere('c.combo= :combo');
            $parameters['combo'] = $card->getCombo();
        }
        if($card->getChoose()) {
            $qb->andWhere('c.choose= :choose');
            $parameters['choose'] = $card->getChoose();
        }
        if(!is_null($card->getSpellDamage())) {
            $qb->andWhere('c.spellDamage= :spellDamage');
            $parameters['spellDamage'] = $card->getSpellDamage();
        }
        if(!is_null($card->getEnrage())) {
            $qb->andWhere('c.enrage= :enrage');
            $parameters['enrage'] = $card->getEnrage();
        }
        if(!is_null($card->getOverload())) {
            $qb->andWhere('c.overload= :overload');
            $parameters['overload'] = $card->getOverload();
        }
        if(!is_null($card->getExtension())) {
            $qb->andWhere('c.extension= :extension');
            $parameters['extension'] = $card->getExtension();
        }
        if(!is_null($card->getClasse())) {
            $qb->andWhere('c.classe= :classe');
            $parameters['classe'] = $card->getClasse();
        }
        if(!is_null($card->getRarity())) {
            $qb->andWhere('c.rarity= :rarity');
            $parameters['rarity'] = $card->getRarity();
        }
        if(!is_null($card->getRace())) {
            $qb->andWhere('c.race= :race');
            $parameters['race'] = $card->getRace();
        }
        if($card->getDiscard()) {
            $qb->andWhere('c.discard= :discard');
            $parameters['discard'] = $card->getDiscard();
        }

        if(!empty($parameters)) {
            $qb->setParameters($parameters);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getTotalNb()
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('count(c.id)');

        return $qb->getQuery()->getSingleScalarResult();
    }
}
